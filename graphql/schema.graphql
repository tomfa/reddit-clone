scalar Date

enum PostType {
  LINK
  TEXT
}

enum SortOrder {
  asc
  desc
}

enum PostSort {
  POPULAR
  RECENT
}

enum VoteValue {
  NEGATIVE
  NEUTRAL
  POSITIVE
}

type User {
  id: String!
  username: String!
  name: String
}

type UserVote {
  userId: String!
  vote: VoteValue!
  id: String!
  postId: String!
}

type PostDisplayData {
  id: String!
  title: String!
}

type Comment {
  id: String!
  post: PostDisplayData!
  author: User!
  body: String!
  createdAt: Date!
}

input CommentCursor {
  id: String!
  postId: String!
  createdAt: Date!
}

type Post {
  id: String!
  title: String!
  slug: String!
  content: String!
  published: Boolean!
  archived: Boolean!
  author: User!
  category: String!
  score: Int!
  numVotes: Int!
  numComments: Int!
  myVote: UserVote
  createdAt: Date!
  type: PostType!
}

input PostCursor {
  id: String!
  numComments: Int!
  numVotes: Int!
  createdAt: Date!
  score: Int!
}

input AddPostInput {
  title: String!
  content: String!
  category: String!
  type: PostType!
}

input AddUserInput {
  email: String!
  authId: String!
  username: String
  name: String
}

input AddCommentInput {
  postId: String!
  authorId: String!
  content: String!
}

type Query {
  getPostById(id: String!): Post
  getUserById(id: String!): User
  posts(
    category: String
    sort: PostSort
    username: String
    archived: Boolean
    order: SortOrder
    year: Int
    month: Int
    week: Int
    cursor: PostCursor
  ): [Post!]!
  comments(
    postId: String
    username: String
    cursor: CommentCursor
  ): [Comment!]!
}

type Mutation {
  vote(authorId: String!, postId: String!, value: VoteValue!): Post
  addPost(input: AddPostInput!): Post!
  addUser(input: AddUserInput!): User
  addComment(input: AddCommentInput!): Comment!
  setPostArchived(id: String!, archived: Boolean!): Post
}
