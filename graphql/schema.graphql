scalar Date

enum PostType {
  LINK
  TEXT
}

enum SortOrder {
  asc
  desc
}

enum PostSort {
  POPULAR
  RECENT
}

enum VoteValue {
  NEGATIVE
  NEUTRAL
  POSITIVE
}

type User {
  id: String!
  username: String!
  name: String
}

type UserVote {
  userId: String!
  vote: VoteValue!
  id: String!
  postSlug: String!
}

type Comment {
  id: String!
  postSlug: String!
  author: User!
  body: String!
  createdAt: Date!
}

type Post {
  title: String!
  slug: String!
  content: String!
  published: Boolean!
  author: User!
  category: String!
  score: Int!
  numVotes: Int!
  myVote: UserVote
  comments: [Comment!]!
  createdAt: Date!
  views: Int!
  type: PostType!
}

input AddPostInput {
  title: String!
  content: String!
  category: String!
  type: PostType!
}

input AddUserInput {
  email: String!
  authId: String!
  username: String
  name: String
}

input AddCommentInput {
  postSlug: String!
  content: String!
}

type Query {
  getPostBySlug(slug: String!): Post
  getUserById(id: String!): User
  posts(
    category: String
    sort: PostSort
    order: SortOrder
    createdAfter: Date
    cursor: Date
  ): [Post!]!
  comments(postSlug: String!, authorId: String, cursor: Date): [Comment!]!
}

type Mutation {
  vote(authorId: String!, postSlug: String!, value: VoteValue!): Post
  addPost(input: AddPostInput!): Post!
  addUser(input: AddUserInput!): User
  addComment(input: AddCommentInput!): Comment!
}
